#pragma checksum "C:\Users\Uguralp\Desktop\Q&A_Assignment4\BlazorCrud\BlazorCrud.Client\Pages\ValidationError.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c37603f954d5a0981d051f53ba786b068ffd295d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorCrud.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using BlazorCrud.Client;
    using BlazorCrud.Client.Shared;
    using System.ComponentModel;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    public class ValidationError : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 14 "C:\Users\Uguralp\Desktop\Q&A_Assignment4\BlazorCrud\BlazorCrud.Client\Pages\ValidationError.cshtml"
            

[Parameter]
protected object Subject { get; set; }

[Parameter]
protected string Property { get; set; }

public IEnumerable<string> Errors
{
    get
    {
        switch (Subject)
        {
            case null:
                yield return $"{nameof(Subject)} has not been set!";
                yield break;
            case INotifyDataErrorInfo ine:
                if (Property == null)
                {
                    yield return $"{nameof(Property)} has not been set!";
                    yield break;
                }
                foreach (var err in ine.GetErrors(Property))
                {
                    yield return (string)err;
                }
                break;
            case IDataErrorInfo ide:
                if (Property == null)
                {
                    yield return $"{nameof(Property)} has not been set!";
                    yield break;
                }
                string error = ide[Property];
                if (error != null)
                {
                    yield return error;
                }
                else
                {
                    yield break;
                }
                break;
        }
    }
}

#line default
#line hidden
    }
}
#pragma warning restore 1591
