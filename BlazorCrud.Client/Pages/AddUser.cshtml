@using BlazorCrud.Shared.Models
@page "/adduser"
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h1>Create</h1>
<h3>User</h3>
<hr />
<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <label for="Fullname" class="control-label">Seller Name</label>
                <input asp-validation-for="Fullname" for="Fullname" class="form-control" bind="@usr.Fullname" />
                <span style="color:red;">@error.FullnameError</span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label">Email</label>
                <input for="Email" class="form-control" bind="@usr.Email" />
                <span style="color:red;">@error.EmailError</span>
            </div>
            <div class="form-group">
                <label asp-for="Address" class="control-label">Address</label>
                <input asp-for="Address" class="form-control" bind="usr.Address" />
                <span style="color:red;">@error.AddressError</span>
            </div>
            <div class="form-group">
                <label asp-for="City" class="control-label">City</label>
                <input asp-for="City" class="form-control" bind="usr.City" />
                <span style="color:red;">@error.CityError</span>
            </div>
            <div class="form-group">
                <label asp-for="PhoneNumber" class="control-label">Phone Number</label>
                <input asp-for="Phone Number" class="form-control" bind="usr.PhoneNumber" />
                <span style="color:red;">@error.PhoneNumberError</span>
            </div>
            <div class="form-group">
                <label asp-for="Vname" class="control-label">Vehicle Name</label>
                <input asp-for="Vname" class="form-control" bind="usr.Vname" />
                <span style="color:red;">@error.VnameError</span>
            </div>
            <div class="form-group">
                <label asp-for="Vmodel" class="control-label">Vehicle Model</label>
                <input asp-for="Vmodel" class="form-control" bind="usr.Vmodel" />
                <span style="color:red;">@error.VmodelError</span>
            </div>
            <div class="form-group">
                <label asp-for="Vyear" class="control-label">Vehicle Year</label>
                <input asp-for="Vyear" class="form-control" bind="usr.Vyear" />
                <span style="color:red;">@error.VyearError</span>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-default" onclick="@(async () => await CreateUser())">Save</button>
                <button class="btn" onclick="@cancel">Cancel</button>
            </div>
        </form>
    </div>
</div>

@functions {

    User usr = new User();
    InputError error = new InputError();
    BoolError boolError = new BoolError();
    Int32 value;

    #region Createuser function
    protected async Task CreateUser()
    {
        //var email = new System.Net.Mail.MailAddress(usr.Email);

        if (string.IsNullOrWhiteSpace(usr.Fullname) || Int32.TryParse(usr.Fullname, out value) || usr.Fullname.Any(c => char.IsDigit(c)))
        {
            error.FullnameError = "Incorrect value!";
            boolError.FullnameError = true;
        }
        else {
            error.FullnameError = "";
            boolError.FullnameError = false;
        }
        if (string.IsNullOrWhiteSpace(usr.Email) || !usr.Email.ToLower().Contains("@"))
        {
            error.EmailError = "Incorrect value!";
            boolError.EmailError = true;
        }
        else {
            error.EmailError = "";
            boolError.EmailError = false;
        }
        if (string.IsNullOrWhiteSpace(usr.Address))
        {
            error.AddressError = "Incorrect value!";
            boolError.AddressError = true;
        }
        else {
            error.AddressError = "";
            boolError.AddressError = false;
        }
        if (string.IsNullOrWhiteSpace(usr.City))
        {
            error.CityError = "Incorrect value!";
            boolError.CityError = true;
        }
        else {
            error.CityError = "";
            boolError.CityError = false; }

        if (string.IsNullOrWhiteSpace(usr.PhoneNumber))
        {
            error.PhoneNumberError = "Incorrect value!";
            boolError.PhoneNumberError = true;
        }
        else {
            error.PhoneNumberError = "";
            boolError.PhoneNumberError = false;
        }
        if (string.IsNullOrWhiteSpace(usr.Vname))
        {
            error.VnameError = "Incorrect value!";
            boolError.PhoneNumberError = true;
        }
        else {
            error.VnameError = "";
            boolError.PhoneNumberError = false;
        }
        if (string.IsNullOrWhiteSpace(usr.Vmodel))
        {
            error.VmodelError = "Incorrect value!";
            boolError.VmodelError = true;
        }
        else {
            error.VmodelError = "";
            boolError.VmodelError = false;
        }

        if (string.IsNullOrWhiteSpace(usr.Vyear))
        {
            error.VyearError = "Incorrect value!";
            boolError.VyearError = true;
        }
        else
        {
            error.VyearError = "";
            boolError.VyearError = false;
        }

        if (usr.PhoneNumber.Length != 11)
        {
            error.PhoneNumberError = "It should be 11 digit!";
            boolError.PhoneNumberError = true;
        }
        else
        {
            error.PhoneNumberError = "";
            boolError.PhoneNumberError = false;
        }


        if (boolError.FullnameError == true || boolError.EmailError == true || boolError.AddressError == true
        || boolError.CityError == true || boolError.PhoneNumberError == true || boolError.VmodelError == true
        || boolError.VyearError == true || boolError.VnameError == true)
        {

        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/User/Create", usr);
            UriHelper.NavigateTo("/fetchuser");
        }

    }
    #endregion

    #region cancel button
    void cancel()
    {
        UriHelper.NavigateTo("/fetchuser");
    }
    #endregion
}